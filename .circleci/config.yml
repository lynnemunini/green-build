# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   print-hello:
#     # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
#     docker:
#       - image: circleci/node:13.8.0
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#     steps:
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo hello"
  
#   # Define a second job to be invoked later in a workflow.
#   print_world:
#     docker:
#       -image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: "Say world"
#           command: "echo world"

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - print-hello
#       - print_world
#           requires:
#             - print-hello

# version: 2.1

# workflows:
#   test-env-vars:
#     jobs:
#       - build

# jobs:
#   build:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: "Build"
#           command: |
#             echo $MY_ENV_VAR

# version: 2.1

# jobs:
#   save_hello_world_output:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run:
#           name: "Save hello world output"
#           command: |
#             echo "hello world" > ~/output.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - output.txt

#   print_output_file: 
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - attach_workspace:
#           at: ~/
#       - run: cat ~/output.txt

# workflows:
#   hello_world:
#     jobs:
#       - save_hello_world_output
#       - print_output_file:
#           requires:
#             - save_hello_world_output
          

# Create a job that uses a "command" that prints the pipelineId to the console.
# version: 2.1
# commands:
#   print_pipeline_id:
#     description: "Print the pipelineId"
#     steps:
#       - run: echo ${CIRCLE_WORKFLOW_ID}
# jobs: 
#   print_pipeline_id:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - print_pipeline_id
# workflows:
#   pipeline:
#     jobs:
#       - print_pipeline_id

# Create a job that has an intentional failure in it with a step that runs on fail that prints "Hello Error!" to the console.
# version: 2.1
# jobs: 
#   with_error: 
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run: 
#           name: "Hello Error!"
#           command: |
#             #!/bin/bash
#             exit 1
      
#       - run:
#           name: "Error"
#           command: |
#             echo "You have an error!!"
#           when: on_fail

# workflows:
#   job_failure:
#     jobs:
#       - with_error

# version: 2.1

# orbs:
#   aws-cli: circleci/aws-cli@3.1
# jobs:
#   setup_aws_cli:
#     executor: aws-cli/default
#     steps:
#       - checkout
#       - aws-cli/setup:
#           profile-name: default
#       - run:
#           name: "Setup AWS CLI"
#           command: |
#             aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#             aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#             aws configure set region $AWS_REGION
#             aws configure set output json

#             # aws configure set output text
#             # NOTE: aws commands need to be run in the same job as the aws-cli/install and aws-cli/configure commands.

#             aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udacity" --output text > ~/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - inventory.txt

#   print_inventory:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - attach_workspace:
#           at: ~/
#       - run: cat ~/inventory.txt

# workflows:
#   inventory:
#     jobs:
#       - setup_aws_cli
#       - print_inventory:
#           requires:
#             - setup_aws_cli

# version: 2.1

# orbs:
#   aws-cli: circleci/aws-cli@3.1

# jobs:
  # create_infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #           --region $AWS_REGION

  # get_ip_addresses:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #         name: Get IP Addresses
  #         command: |
  #           aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udacity" --output text > ~/inventory.txt
  
  # configure_infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: $SSH_KEY_FINGERPRINT
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           # Install Ansible
  #           apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           # Configure Ansible
  #           ansible-playbook -i inventory.txt main-remote.yml

# workflows:
#   create_infrastructure:
#     jobs:
      # - create_infrastructure
      # - get_ip_addresses:
      #     requires:
      #       - create_infrastructure
      # - configure_infrastructure

# version: 2.1

# jobs:
#   # Smoke testing
#   smoke_test:
#     docker:
#       - image: alpine:latest
#     steps:
#       - run: apk add --update curl
#       - run:
#           name: smoke test
#           command: |
#             URL="https://blog.udacity.com/"
#             # Test if website exists
#             if curl -s --head ${URL}
#             then
#               return 0
#             else:
#               return 1
#             fi

# workflows:
#   smoke_test:
#     jobs:
#       - smoke_test

version: 2.1
commands:
  destroy_environment:
    description: "Destroy the environment"
    steps:
    - run:
        name: Destroy the environment
        when: on_fail
        command: |
          # Destroy the environment
          aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --region $AWS_REGION
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: smoke test
          command: return 1
      - destroy_environment

workflows:
  workflow_1:
    jobs:
      - create_infrastructure
      - smoke_test:
          requires:
            - create_infrastructure

            


